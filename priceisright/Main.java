/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Main.java
 *
 * Created on Apr 29, 2011, 1:42:53 AM
 */

package priceisright;

import java.awt.BorderLayout;
import java.io.File;
import java.util.Scanner;
import java.util.StringTokenizer;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 *
 * @author chantavy
 */
public class Main extends javax.swing.JPanel {
    final String delimiter=",";
    final int ITERATIONS=1;
    NeuralNetwork net;


    /** Creates new form Main */
    public Main() {
        initComponents();
        trainNeuralNetwork();
    }

    private void trainNeuralNetwork() {
        //run the training
        //load inputs from file
        int[] layerdata = {5, 6, 5};
        net = new NeuralNetwork(layerdata);
        int success = 0;
        try {
            File in = new File(Main.class.getClassLoader().getResource("Inputs.txt").toURI());
            Scanner scan = new Scanner(in);
            String sLine = "";
            int lines = 0;
            //first, count the number of lines in the file
            while (scan.hasNextLine()) {
                scan.nextLine();
                lines++;
            }
            double[][] trainingData = new double[lines][6];
            scan = new Scanner(in);
            lines = 0;
            //load training data
            while (scan.hasNextLine()) {
                sLine = scan.nextLine();
                StringTokenizer st = new StringTokenizer(sLine, ",");
                trainingData[lines][0] = Double.parseDouble(st.nextToken());
                trainingData[lines][1] = Double.parseDouble(st.nextToken());
                trainingData[lines][2] = Double.parseDouble(st.nextToken());
                trainingData[lines][3] = Double.parseDouble(st.nextToken());
                trainingData[lines][4] = Double.parseDouble(st.nextToken());
                trainingData[lines][5] = Double.parseDouble(st.nextToken());
                lines++;
            }
            //train the NN
            for (int i = 0; i < trainingData.length; i++) {
                double[] temp = {trainingData[i][0], trainingData[i][1], trainingData[i][2], trainingData[i][3], trainingData[i][4]};
                System.out.println("Learning input " + i);
                for (int j = 0; j < ITERATIONS; j++) {
                    double passed = net.backprop(temp, trainingData[i][5]);
                    if (passed != -1) {
                        success++;
                        System.out.println("Passed with " + passed + " max error.");
                    } else {
                        System.out.println("Backprop failed.");
                    }
                }
            }
            System.out.println(success + " inputs successfully trained.");

        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    public static void main (String[] args) {
        //Create top level frame
        JFrame myWindow = new JFrame("The Price is Right");
        //dispose
        myWindow.setDefaultCloseOperation(3);
        //instance the component class
        Main contents = new Main();
        //add it to the top level container
        myWindow.add(contents,BorderLayout.CENTER);
        myWindow.pack();
        myWindow.setVisible(true);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        screenSizeComboBox = new javax.swing.JComboBox();
        processorComboBox = new javax.swing.JComboBox();
        ramComboBox = new javax.swing.JComboBox();
        hddComboBox = new javax.swing.JComboBox();
        gpuComboBox = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        userGuess = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        runButton = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel5 = new javax.swing.JLabel();
        algorithmResult = new javax.swing.JFormattedTextField();
        cmpGuess = new javax.swing.JFormattedTextField();

        screenSizeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "(Choose screen)", "11\"", "13\"", "14\"", "15\"", "17\"" }));

        processorComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "(Processor)", "Core 2 Duo", "i3", "i5", "i7" }));

        ramComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "(RAM)", "2GB", "4GB", "6GB", "8GB" }));

        hddComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "(HDD)", "Platter 160GB", "Platter 250GB", "Platter 320GB", "Platter 500GB", "Platter 640GB", "Platter 750GB", "SSD 64GB", "SSD 80GB", "SSD 120GB", "SSD 256GB" }));

        gpuComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "(Video card)", "Integrated", "Dedicated" }));

        jLabel1.setText("1. Enter laptop specs");

        jLabel2.setText("2. Now, guess the price:");

        userGuess.setColumns(8);

        jLabel3.setText("Computer's guess is:");

        runButton.setText("RUN");
        runButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runButtonActionPerformed(evt);
            }
        });

        jLabel4.setText("The Price Is Right! :)");

        jLabel5.setText("Algorithm Result:");

        algorithmResult.setColumns(8);
        algorithmResult.setEditable(false);

        cmpGuess.setColumns(8);
        cmpGuess.setEditable(false);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(jLabel1))
                    .add(layout.createSequentialGroup()
                        .add(96, 96, 96)
                        .add(jSeparator1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 405, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(layout.createSequentialGroup()
                        .add(198, 198, 198)
                        .add(jSeparator2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 210, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(layout.createSequentialGroup()
                        .add(288, 288, 288)
                        .add(jLabel4))
                    .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createSequentialGroup()
                                .add(screenSizeComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(processorComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(8, 8, 8)
                                .add(gpuComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(layout.createSequentialGroup()
                                .add(jLabel2)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(userGuess, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 105, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(runButton)
                                .add(71, 71, 71))
                            .add(layout.createSequentialGroup()
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                    .add(jLabel5)
                                    .add(jLabel3))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                    .add(cmpGuess)
                                    .add(algorithmResult))))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(ramComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(hddComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(178, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(jLabel4)
                .add(19, 19, 19)
                .add(jSeparator1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 10, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel1)
                .add(24, 24, 24)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(screenSizeComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(ramComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(hddComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(gpuComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(processorComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(17, 17, 17)
                .add(jSeparator2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 10, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel2)
                    .add(userGuess, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(runButton))
                .add(42, 42, 42)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel3)
                    .add(cmpGuess, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel5)
                    .add(algorithmResult, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(32, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void runButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runButtonActionPerformed
        double[] data = new double[5];
        double screen = getScreenValue();
        double proc = getProcessorValue();
        double vid = getVidcardValue();
        double mem = getMemoryValue();
        double hdd = getHddValue();
        double punyHumanGuess = 0;
        double compGuess = 0;
        try {
            punyHumanGuess = Double.parseDouble(userGuess.getText());
            if (screen >= 0 && proc >= 0 && vid >= 0 && mem >= 0 && hdd >= 0) {//if values are valid
                data[0] = screen;
                data[1] = proc;
                data[2] = vid;
                data[3] = mem;
                data[4] = hdd;
                System.out.println(data[0]+","+data[1]+","+data[2]+","+data[3]+","+data[4]);//debug
                double result = net.feedForward(data);
                algorithmResult.setValue(result);
                if (punyHumanGuess < result) {
                    compGuess = punyHumanGuess + 0.01;
                } else {
                    compGuess = result * 0.85;
                }
                cmpGuess.setValue(compGuess);
            } else {
                JOptionPane.showMessageDialog(this, "Please check your specs settings",
                        "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Please enter a number value.",
                    "Error", JOptionPane.ERROR_MESSAGE);
        }


        
    }//GEN-LAST:event_runButtonActionPerformed

    private double getScreenValue() {
        double value;
        switch(screenSizeComboBox.getSelectedIndex()) {
            case 1:
                value = 120;
                break;
            case 2:
                value = 140;
                break;
            case 3:
                value = 160;
                break;
            case 4:
                value = 180;
                break;
            case 5:
                value = 200;
                break;
            default:
                value = -1; //error..
        }
        return value;
    }
    private double getProcessorValue() {
        double value;
        switch(processorComboBox.getSelectedIndex()) {
            case 1:
                value = 100;
                break;
            case 2:
                value = 130;
                break;
            case 3:
                value = 260;
                break;
            case 4:
                value = 370;
                break;
            default:
                value = -1; //error..
        }
        return value;
    }
    private double getVidcardValue() {
        double value;
        switch(gpuComboBox.getSelectedIndex()) {
            case 1:
                value = 100;
                break;
            case 2:
                value = 200;
                break;
            default:
                value = -1; //error..
        }
        return value;
    }
    private double getMemoryValue() {
        double value;
        switch(ramComboBox.getSelectedIndex()) {
            case 1:
                value = 50;
                break;
            case 2:
                value = 70;
                break;
            case 3:
                value = 90;
                break;
            case 4:
                value = 110;
                break;
            default:
                value = -1; //error..
        }
        return value;
    }
    private double getHddValue() {
        double value;
        switch(hddComboBox.getSelectedIndex()) {
            case 1:
                value = 40;
                break;
            case 2:
                value = 50;
                break;
            case 3:
                value = 60;
                break;
            case 4:
                value = 70;
                break;
            case 5:
                value = 80;
                break;
            case 6:
                value = 90;
                break;
            case 7:
                value = 130;
                break;
            case 8:
                value = 200;
                break;
            case 9:
                value = 300;
                break;
            case 10:
                value = 600;
                break;
            default:
                value = -1; //error..
        }
        return value;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFormattedTextField algorithmResult;
    private javax.swing.JFormattedTextField cmpGuess;
    private javax.swing.JComboBox gpuComboBox;
    private javax.swing.JComboBox hddComboBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JComboBox processorComboBox;
    private javax.swing.JComboBox ramComboBox;
    private javax.swing.JButton runButton;
    private javax.swing.JComboBox screenSizeComboBox;
    private javax.swing.JTextField userGuess;
    // End of variables declaration//GEN-END:variables

}
